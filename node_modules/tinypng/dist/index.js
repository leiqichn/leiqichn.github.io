"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TinyPNG = void 0;
const promises_1 = require("fs/promises");
const axios_1 = require("axios");
const toBuffer = (data) => __awaiter(void 0, void 0, void 0, function* () { return typeof data === 'string' ? (0, promises_1.readFile)(data) : data; });
class TinyPNG {
    constructor(apiKey) {
        this.instance = axios_1.default.create({
            baseURL: 'https://api.tinify.com',
            timeout: 10 * 1000,
            auth: {
                username: 'api',
                password: apiKey,
            },
        });
    }
    compress(data, config) {
        return __awaiter(this, void 0, void 0, function* () {
            const isUrl = typeof data === 'string' && /https?:\/\//i.test(data);
            const { data: shrinkResult, headers } = yield this.instance.post('/shrink', isUrl
                ? {
                    source: {
                        url: data,
                    },
                }
                : yield toBuffer(data), {
                headers: {
                    'Content-Type': isUrl ? 'application/json' : 'multipart/form-data',
                },
            });
            if (config) {
                const { data: shrinkData } = yield this.instance.post(headers.location, {
                    data: {
                        resize: config.method
                            ? {
                                method: config.method,
                                width: config.width,
                                height: config.height,
                            }
                            : undefined,
                        preserve: config.preserve,
                    },
                });
                return {
                    data: Buffer.from(shrinkData, 'binary'),
                    size: shrinkResult.input.size,
                    type: shrinkResult.input.type,
                };
            }
            const { data: shrinkData } = yield this.instance.get(headers.location, {
                responseType: 'arraybuffer',
            });
            return {
                data: Buffer.from(shrinkData, 'binary'),
                size: shrinkResult.input.size,
                type: shrinkResult.input.type,
            };
        });
    }
}
exports.TinyPNG = TinyPNG;
__exportStar(require("./types"), exports);
