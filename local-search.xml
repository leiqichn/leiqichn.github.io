<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>复旦大学 生命科学学院 生物医药复试 准备</title>
    <link href="/2023/03/15/%E8%AE%B0%E5%BD%95/%E5%BD%95/%E5%A4%8D%E6%97%A6%E5%A4%A7%E5%AD%A6%20%E7%94%9F%E5%91%BD%E7%A7%91%E5%AD%A6%E5%AD%A6%E9%99%A2%20%E7%94%9F%E7%89%A9%E5%8C%BB%E8%8D%AF%E4%B8%93%E7%A1%95%20%E5%A4%8D%E8%AF%95%E5%87%86%E5%A4%87/"/>
    <url>/2023/03/15/%E8%AE%B0%E5%BD%95/%E5%BD%95/%E5%A4%8D%E6%97%A6%E5%A4%A7%E5%AD%A6%20%E7%94%9F%E5%91%BD%E7%A7%91%E5%AD%A6%E5%AD%A6%E9%99%A2%20%E7%94%9F%E7%89%A9%E5%8C%BB%E8%8D%AF%E4%B8%93%E7%A1%95%20%E5%A4%8D%E8%AF%95%E5%87%86%E5%A4%87/</url>
    
    <content type="html"><![CDATA[<p> <strong>复试，首先要确定时间</strong>，一般会邮件和短信同时通知，这个邮箱地址是你在研究生招生网上填的邮箱地址。如果是qq邮箱有可能会在垃圾邮箱里边，注意查收哈。<br> 还有一种方法就是关注<a href="https://life.fudan.edu.cn/28139/list.htm">生科院的官网</a>。<br>​<br>复试流程</p><p><strong>1.首先是分组</strong></p><p>   按照往年的情况，一般会分为两组，两组同时开始面试。该分组是老师分的，非自主抽签。</p><p><strong>2.面试时间</strong><br>   一个人一般是在20分钟左右，前面几个人肯定会问的细一点，后边如果时间比较紧张，老师就会问的快一点。</p><p><strong>3.是大家比较关心的面试内容</strong><br>  分为两个部分：<br><strong>一、英语口语</strong>，可能是英文自我介绍，没有问答。也可能是进入到一个屋子里，一个老师问你一些简单的英语问题，比如去过哪里旅游，有什么爱好等等。可能会稍微问些专业方面的，比如之前做过哪些方向等。常见的专业词汇可以掌握一下，比如细菌（bacteria）等，都比较简单。而且英语是不算分的，只会给老师提供参考。（关注公众号”<strong>上岸FDU</strong>“**，回复“复试口语”会发口语资料哟）</p><p> 第二部分是<strong>专业面试</strong>，主要会先让你自我介绍，会问你之前的科研经历，可以说说毕设，但是务必把自己说的了解清楚，老师都很专业会问的很细。可以准备简历，但是简历上的东西都要十分清楚（准备10份是肯定够了，一般会有7-8个老师）<br>  还会问喜欢什么方向，如果录取了未来三年的规划等。总体比较轻松，要保证好心情，不要紧张就好。</p><p><strong>4.考完1-2天后，会电话&#x2F;邮件&#x2F;短信通知考试，通过复试，接下来就是等官方录取通知书就好啦！</strong></p><p>总体来说复试通过比例很大，我记得当时50多人只刷了一两个人，所以大家放平心态，多多准备就好啦！</p><p>祝大家复试成功～</p>]]></content>
    
    
    <categories>
      
      <category>记录</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>LeetCode 刷题常用数据结构（Go 篇）</title>
    <link href="/2023/03/14/leetcode/eetcode/LeetCode%20%E5%88%B7%E9%A2%98%E5%B8%B8%E7%94%A8%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%EF%BC%88Go%20%E7%AF%87%EF%BC%89/"/>
    <url>/2023/03/14/leetcode/eetcode/LeetCode%20%E5%88%B7%E9%A2%98%E5%B8%B8%E7%94%A8%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%EF%BC%88Go%20%E7%AF%87%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近重新开始用 Go 刷 LeetCode 算法题，针对工作需求的算法刷题其实主要是锻炼解决问题的思路和代码撰写能力，而不是像算法竞赛那样用复杂的数据结构，所以常用的数据结构和操作并不多，熟练使用也能很好地提升自己的代码质量，特此做一个整理，以便于查阅。</p><h2 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h2><h3 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h3><h4 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// 初始化一个大小为10，默认值为0的数组</span><br>nums := <span class="hljs-built_in">make</span>([<span class="hljs-number">10</span>]<span class="hljs-type">int</span>)<br><br><span class="hljs-comment">// 初始化一个二位boolean数组</span><br>visited := <span class="hljs-built_in">make</span>([<span class="hljs-number">5</span>][<span class="hljs-number">10</span>]<span class="hljs-type">int</span>)<br></code></pre></td></tr></table></figure><h4 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; <span class="hljs-built_in">len</span>(nums); i++ &#123;<br>    <span class="hljs-comment">// 访问num[i]</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="字符串-String"><a href="#字符串-String" class="headerlink" title="字符串 String"></a>字符串 String</h3><h4 id="初始化-1"><a href="#初始化-1" class="headerlink" title="初始化"></a>初始化</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs go">s1 := <span class="hljs-string">&quot;hello world&quot;</span><br><br><span class="hljs-comment">// 创建多行字符串</span><br>s2 := <span class="hljs-string">`This is a</span><br><span class="hljs-string">multiline</span><br><span class="hljs-string">string.`</span><br></code></pre></td></tr></table></figure><h4 id="访问字符串"><a href="#访问字符串" class="headerlink" title="访问字符串"></a>访问字符串</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// 可直接用索引访问字节（非字符）</span><br>s1 := <span class="hljs-string">&quot;hello world&quot;</span><br>first := s[<span class="hljs-number">0</span>]<br><br>s2 := []<span class="hljs-type">byte</span>(s1)<br>first := s2[<span class="hljs-number">0</span>]<br></code></pre></td></tr></table></figure><h4 id="修改字符串"><a href="#修改字符串" class="headerlink" title="修改字符串"></a>修改字符串</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// 字符串的值是不可变的，可以分配一个新字符串值</span><br>s := <span class="hljs-string">&quot;hello&quot;</span><br>t := s<br><br><span class="hljs-comment">// 将字符串转为[]byte或[]rune可以进行修改</span><br>s1 := <span class="hljs-string">&quot;hello world&quot;</span><br>s2 := []<span class="hljs-type">byte</span>(s1)<br>s2[<span class="hljs-number">0</span>] = <span class="hljs-string">&#x27;H&#x27;</span><br>s3 := <span class="hljs-type">string</span>(s2)<br></code></pre></td></tr></table></figure><h4 id="查询字符是否属于特定字符集"><a href="#查询字符是否属于特定字符集" class="headerlink" title="查询字符是否属于特定字符集"></a>查询字符是否属于特定字符集</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// 判断字符串s的i索引位置字符是否是元音</span><br><span class="hljs-keyword">if</span> strings.Contains(<span class="hljs-string">&quot;aeiouAEIOU&quot;</span>, <span class="hljs-type">string</span>(s[i])) &#123;<br>    <span class="hljs-comment">// ...</span><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="判断字符串大小"><a href="#判断字符串大小" class="headerlink" title="判断字符串大小"></a>判断字符串大小</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">if</span> s1 == s2 &#123;<br>    <span class="hljs-comment">// 相等</span><br>&#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-comment">// 不相等</span><br>&#125;<br><br><span class="hljs-comment">// Compare 函数可以用于比较，1大于，0相等，-1小于</span><br><span class="hljs-comment">// EqualFold 函数忽略大小写后比较</span><br></code></pre></td></tr></table></figure><h4 id="拼接字符串"><a href="#拼接字符串" class="headerlink" title="拼接字符串"></a>拼接字符串</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// 支持直接用+进行连接，但是效率不高</span><br>s1 := <span class="hljs-string">&quot;hello &quot;</span><br>s2 := s1 + <span class="hljs-string">&quot;world&quot;</span><br></code></pre></td></tr></table></figure><h4 id="高效拼接字符串"><a href="#高效拼接字符串" class="headerlink" title="高效拼接字符串"></a>高效拼接字符串</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// bytes.Buffer可以一次性连接</span><br><span class="hljs-keyword">var</span> b bytes.Buffer<br>b.WriteString(<span class="hljs-string">&quot;Hello &quot;</span>)<br>b.WriteString(<span class="hljs-string">&quot;World&quot;</span>)<br>b1 := b.String()<br><br><span class="hljs-comment">// 多个字符串拼接</span><br><span class="hljs-keyword">var</span> strs []<span class="hljs-type">string</span><br>strings.Join(strs, <span class="hljs-string">&quot;World&quot;</span>)<br></code></pre></td></tr></table></figure><h4 id="整型-或任意数据类型-转为字符串"><a href="#整型-或任意数据类型-转为字符串" class="headerlink" title="整型 (或任意数据类型) 转为字符串"></a>整型 (或任意数据类型) 转为字符串</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// Itoa转换</span><br>i := <span class="hljs-number">123</span><br>t := strconv.Itoa(i)<br><br><span class="hljs-comment">// Sprintf转换</span><br>i := <span class="hljs-number">123</span><br>t := fmt.Sprintf(<span class="hljs-string">&quot;%d&quot;</span>, i)<br></code></pre></td></tr></table></figure><h3 id="切片-slice"><a href="#切片-slice" class="headerlink" title="切片 slice"></a>切片 slice</h3><h4 id="初始化-2"><a href="#初始化-2" class="headerlink" title="初始化"></a>初始化</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// 初始化一个存储String类型的切片</span><br>slice := <span class="hljs-built_in">make</span>([]<span class="hljs-type">string</span>, <span class="hljs-number">0</span>)<br>slice := []<span class="hljs-type">string</span><br><br><span class="hljs-comment">// 初始化一个存储int类型的切片</span><br>slice := <span class="hljs-built_in">make</span>([]<span class="hljs-type">int</span>, <span class="hljs-number">0</span>)<br>slice := []<span class="hljs-type">int</span><br></code></pre></td></tr></table></figure><h4 id="常用方法-1"><a href="#常用方法-1" class="headerlink" title="常用方法"></a>常用方法</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// 判断是否为空</span><br><span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(slice) == <span class="hljs-number">0</span> &#123;<br>    <span class="hljs-comment">// 为空</span><br>&#125;<br><br><span class="hljs-comment">// 返回元素个数</span><br><span class="hljs-built_in">len</span>()<br><br><span class="hljs-comment">// 访问索引元素</span><br>slice[i]<br><br><span class="hljs-comment">// 在尾部添加元素</span><br>slice = <span class="hljs-built_in">append</span>(slice, <span class="hljs-number">1</span>)<br></code></pre></td></tr></table></figure><h3 id="通过切片模拟栈和队列"><a href="#通过切片模拟栈和队列" class="headerlink" title="通过切片模拟栈和队列"></a>通过切片模拟栈和队列</h3><h4 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// 创建栈</span><br>stack := <span class="hljs-built_in">make</span>([]<span class="hljs-type">int</span>, <span class="hljs-number">0</span>)<br><span class="hljs-comment">// push压入</span><br>stack = <span class="hljs-built_in">append</span>(stack, <span class="hljs-number">10</span>)<br><span class="hljs-comment">// pop弹出</span><br>v := stack[<span class="hljs-built_in">len</span>(stack) - <span class="hljs-number">1</span>]<br>stack = stack[:<span class="hljs-built_in">len</span>(stack) - <span class="hljs-number">1</span>]<br><span class="hljs-comment">// 检查栈空</span><br><span class="hljs-built_in">len</span>(stack) == <span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><h4 id="队列"><a href="#队列" class="headerlink" title="队列"></a>队列</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// 创建队列</span><br>queue := <span class="hljs-built_in">make</span>([]<span class="hljs-type">int</span>, <span class="hljs-number">0</span>)<br><span class="hljs-comment">// enqueue入队</span><br>queue = <span class="hljs-built_in">append</span>(queue, <span class="hljs-number">10</span>)<br><span class="hljs-comment">// dequeue出队</span><br>v := queue[<span class="hljs-number">0</span>]<br>queue = queue[<span class="hljs-number">1</span>:]<br><span class="hljs-comment">// 长度0为空</span><br><span class="hljs-built_in">len</span>(queue) == <span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><h3 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// 创建</span><br>m := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>]<span class="hljs-type">int</span>)<br><span class="hljs-comment">// 设置kv</span><br>m[<span class="hljs-string">&quot;hello&quot;</span>] = <span class="hljs-number">1</span><br><span class="hljs-comment">// 删除k</span><br><span class="hljs-built_in">delete</span>(m,<span class="hljs-string">&quot;hello&quot;</span>)<br><span class="hljs-comment">// 遍历</span><br><span class="hljs-keyword">for</span> k, v := <span class="hljs-keyword">range</span> m&#123;<br>    <span class="hljs-comment">// 操作</span><br>&#125;<br><br><span class="hljs-comment">// map键需要可比较，不能为slice、map、function</span><br><span class="hljs-comment">// map值都有默认值，可以直接操作默认值，如：m[age]++ 值由0变为1</span><br><span class="hljs-comment">// 比较两个map需要遍历，其中的kv是否相同，因为有默认值关系，所以需要检查val和ok两个值</span><br></code></pre></td></tr></table></figure><h3 id="标准库"><a href="#标准库" class="headerlink" title="标准库"></a>标准库</h3><h4 id="SORT"><a href="#SORT" class="headerlink" title="SORT"></a>SORT</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// int排序</span><br>sort.Ints([]<span class="hljs-type">int</span>&#123;&#125;)<br><span class="hljs-comment">// 字符串排序</span><br>sort.Strings([]<span class="hljs-type">string</span>&#123;&#125;)<br></code></pre></td></tr></table></figure><h4 id="MATH"><a href="#MATH" class="headerlink" title="MATH"></a>MATH</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// int32 最大最小值</span><br>math.MaxInt32<br>math.MinInt32<br><span class="hljs-comment">// int64 最大最小值（int默认是int64）</span><br>math.MaxInt64<br>math.MinInt64<br></code></pre></td></tr></table></figure><h4 id="COPY"><a href="#COPY" class="headerlink" title="COPY"></a>COPY</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// 删除a[i]，可以用 copy 将i+1到末尾的值覆盖到i,然后末尾-1</span><br><span class="hljs-built_in">copy</span>(a[i:], a[i+<span class="hljs-number">1</span>:])<br>a = a[:<span class="hljs-built_in">len</span>(a)<span class="hljs-number">-1</span>]<br><br><span class="hljs-comment">// make创建长度，则通过索引赋值</span><br>a := <span class="hljs-built_in">make</span>([]<span class="hljs-type">int</span>, n)<br>a[n] = x<br><br><span class="hljs-comment">// make长度为0，则通过append()赋值</span><br>a := <span class="hljs-built_in">make</span>([]<span class="hljs-type">int</span>, <span class="hljs-number">0</span>)<br>a = <span class="hljs-built_in">append</span>(a, x)<br></code></pre></td></tr></table></figure><h3 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// byte转数字 </span><br><span class="hljs-comment">// byte 和rune 都会转化为阿斯克吗，不同的是rune 遇到汉字是一个字符，byte 是三个</span><br><span class="hljs-comment">// byte 和int 转换需要 + &#x27;0&#x27;</span><br><span class="hljs-comment">// int 转byte 需要  int(s[0] - &#x27;0&#x27;) </span><br><span class="hljs-comment">// 单个byte 或 rune 可以前面直接加string 进行转换。[]byte&#123;&#125; []rune&#123;&#125; 也可以使用string 转换。</span><br>s = <span class="hljs-string">&quot;12345&quot;</span>  <span class="hljs-comment">// s[0] 类型是byte</span><br>num := <span class="hljs-type">int</span>(s[<span class="hljs-number">0</span>] - <span class="hljs-string">&#x27;0&#x27;</span>) <span class="hljs-comment">// 1</span><br>str := <span class="hljs-type">string</span>(s[<span class="hljs-number">0</span>]) <span class="hljs-comment">// &quot;1&quot;</span><br>b := <span class="hljs-type">byte</span>(num + <span class="hljs-string">&#x27;0&#x27;</span>) <span class="hljs-comment">// &#x27;1&#x27;</span><br>fmt.Printf(<span class="hljs-string">&quot;%d%s%c\n&quot;</span>, num, str, b) <span class="hljs-comment">// 111</span><br><br><span class="hljs-comment">// 字符串转数字</span><br>num, _ := strconv.Atoi()<br>str := strconv.Itoa()<br></code></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>刷题路漫漫…加油！</p>]]></content>
    
    
    <categories>
      
      <category>leetcode</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>关于我</title>
    <link href="/2023/03/14/%E5%85%B3%E4%BA%8E%E6%88%91/%E4%BA%8E%E6%88%91/%E5%85%B3%E4%BA%8E%E6%88%91/"/>
    <url>/2023/03/14/%E5%85%B3%E4%BA%8E%E6%88%91/%E4%BA%8E%E6%88%91/%E5%85%B3%E4%BA%8E%E6%88%91/</url>
    
    <content type="html"><![CDATA[<h1 id="关于我"><a href="#关于我" class="headerlink" title="关于我"></a>关于我</h1><p>大家好，我是Lei Qi, 毕业于复旦大学 生物信息专业，现转码农成功，任职于华为，担任软件开发工程师一职。本站是为了方便自己记录学习过程，和大家交流经验而建。也是为了学习web, 实现拥有自己一个网站的小目标，才有了本站。欢迎大家多多交流学习，祝大家学习愉快~</p>]]></content>
    
    
    <categories>
      
      <category>关于我</category>
      
    </categories>
    
    
    <tags>
      
      <tag>about</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
