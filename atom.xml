<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Lei Qi&#39;s Blog</title>
  
  
  <link href="http://leiqichn.github.io/atom.xml" rel="self"/>
  
  <link href="http://leiqichn.github.io/"/>
  <updated>2023-04-12T15:23:58.080Z</updated>
  <id>http://leiqichn.github.io/</id>
  
  <author>
    <name>Lei Qi</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>波纹</title>
    <link href="http://leiqichn.github.io/2023-04-08-343cd8744ef0.html"/>
    <id>http://leiqichn.github.io/2023-04-08-343cd8744ef0.html</id>
    <published>2023-04-08T13:41:33.000Z</published>
    <updated>2023-04-12T15:23:58.080Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/../../imgs/IMG_1502-01-01.jpeg"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;/../../imgs/IMG_1502-01-01.jpeg&quot;&gt;&lt;/p&gt;
</summary>
      
    
    
    
    <category term="记录" scheme="http://leiqichn.github.io/categories/%E8%AE%B0%E5%BD%95/"/>
    
    
    <category term="摄影" scheme="http://leiqichn.github.io/tags/%E6%91%84%E5%BD%B1/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode 513.找树左下角的值</title>
    <link href="http://leiqichn.github.io/2023-04-03-d2d9a7e62e40.html"/>
    <id>http://leiqichn.github.io/2023-04-03-d2d9a7e62e40.html</id>
    <published>2023-04-03T22:44:37.000Z</published>
    <updated>2023-04-12T15:23:58.076Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://leetcode.cn/problems/find-bottom-left-tree-value/">513. 找树左下角的值 - 力扣（Leetcode）</a></p><p>给定一个二叉树的 <strong>根节点</strong> <code>root</code>，请找出该二叉树的 <strong>最底层 最左边</strong> 节点的值。</p><p>假设二叉树中至少有一个节点。</p><p><strong>示例 1:</strong></p><p><img src="https://assets.leetcode.com/uploads/2020/12/14/tree1.jpg"></p><p><strong>输入:</strong> root &#x3D; [2,1,3]<br><strong>输出:</strong> 1</p><p><strong>示例 2:</strong></p><p><img src="https://assets.leetcode.com/uploads/2020/12/14/tree2.jpg"></p><p><strong>输入:</strong> [1,2,3,4,null,5,6,null,null,7]<br><strong>输出:</strong> 7</p><p><strong>提示:</strong></p><ul><li>二叉树的节点个数的范围是 <code>[1,104]</code></li><li><code>-2^31 &lt;= Node.val &lt;= 2^31 - 1</code></li></ul><h2 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h2><p>本题可以转化为什么呢？</p><blockquote><p>1.最后一层的最左边的数值，递归的话需要记录最后一层，并且记录最左边的值<br>2.如果是迭代呢？这个就更适合了，只要记录每层迭代中的第一个值，并且不断更新更大的值就好。</p></blockquote><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><p>1.递归</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">var</span> depth <span class="hljs-type">int</span>   <span class="hljs-comment">// 全局变量 最大深度</span><br><span class="hljs-keyword">var</span> res <span class="hljs-type">int</span>     <span class="hljs-comment">// 记录最终结果</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">findBottomLeftValue</span><span class="hljs-params">(root *TreeNode)</span></span> <span class="hljs-type">int</span> &#123;<br>    depth, res = <span class="hljs-number">0</span>, <span class="hljs-number">0</span>   <br>    dfs(root, <span class="hljs-number">1</span>)<br>    <span class="hljs-keyword">return</span> res<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">dfs</span><span class="hljs-params">(root *TreeNode, d <span class="hljs-type">int</span>)</span></span> &#123;<br>    <span class="hljs-comment">//这里判断nil ,后边左右节点就不用判断了</span><br>    <span class="hljs-keyword">if</span> root == <span class="hljs-literal">nil</span> &#123;<br>        <span class="hljs-keyword">return</span><br>    &#125;<br>    <span class="hljs-comment">// 因为先遍历左边，所以左边如果有值，右边的同层不会更新结果</span><br>    <span class="hljs-keyword">if</span> root.Left == <span class="hljs-literal">nil</span> &amp;&amp; root.Right == <span class="hljs-literal">nil</span> &amp;&amp; depth &lt; d &#123; <br>        depth = d<br>        res = root.Val<br>    &#125;<br>    dfs(root.Left, d+<span class="hljs-number">1</span>)   <br>    dfs(root.Right, d+<span class="hljs-number">1</span>)<br>&#125;<br><br></code></pre></td></tr></table></figure><p>2.迭代</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Definition for a binary tree node.</span><br><span class="hljs-comment"> * type TreeNode struct &#123;</span><br><span class="hljs-comment"> *     Val int</span><br><span class="hljs-comment"> *     Left *TreeNode</span><br><span class="hljs-comment"> *     Right *TreeNode</span><br><span class="hljs-comment"> * &#125;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">findBottomLeftValue</span><span class="hljs-params">(root *TreeNode)</span></span> <span class="hljs-type">int</span> &#123;<br>res := <span class="hljs-number">-1</span><br>queue := []*TreeNode&#123;&#125;<br><br><span class="hljs-keyword">if</span> root == <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-number">-1</span><br>&#125;<br><br>queue = <span class="hljs-built_in">append</span>(queue, root)<br><span class="hljs-comment">//res 在哪里更新呢？</span><br><span class="hljs-keyword">for</span> <span class="hljs-built_in">len</span>(queue) &gt; <span class="hljs-number">0</span> &#123;<br>size := <span class="hljs-built_in">len</span>(queue)<br><span class="hljs-comment">// 遍历每一层</span><br><span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; size; i++ &#123;<br>top := queue[<span class="hljs-number">0</span>]<br>queue = queue[<span class="hljs-number">1</span>:]<br><span class="hljs-comment">// 获取每一层的最左边的位置，更新res</span><br><span class="hljs-keyword">if</span> i == <span class="hljs-number">0</span> &#123;<br>res = top.Val<br>&#125;<br><span class="hljs-keyword">if</span> top.Left != <span class="hljs-literal">nil</span> &#123;<br>queue = <span class="hljs-built_in">append</span>(queue, top.Left)<br>&#125;<br><span class="hljs-keyword">if</span> top.Right != <span class="hljs-literal">nil</span> &#123;<br>queue = <span class="hljs-built_in">append</span>(queue, top.Right)<br>&#125;<br>&#125;<br><br>&#125;<br><span class="hljs-keyword">return</span> res<br>&#125;<br><br><br><span class="hljs-comment">// 迭代2 每层用一个切片</span><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">findBottomLeftValue</span><span class="hljs-params">(root *TreeNode)</span></span> <span class="hljs-type">int</span> &#123;<br>res := <span class="hljs-number">-1</span><br>queue := []*TreeNode&#123;&#125;<br><br><span class="hljs-keyword">if</span> root == <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-number">-1</span><br>&#125;<br><span class="hljs-comment">// 通过另外一个切片来添加的解法也要尝试学习一下</span><br>queue = <span class="hljs-built_in">append</span>(queue, root)<br><span class="hljs-comment">//res 在哪里更新呢？</span><br><span class="hljs-keyword">for</span> <span class="hljs-built_in">len</span>(queue) &gt; <span class="hljs-number">0</span> &#123;<br>size := <span class="hljs-built_in">len</span>(queue)<br><span class="hljs-comment">// 使用nextqueue 保存每一层，然后追加到queue</span><br>nextqueue := []*TreeNode&#123;&#125;<br><span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; size; i++ &#123;<br>top := queue[<span class="hljs-number">0</span>]<br>queue = queue[<span class="hljs-number">1</span>:]<br>    res = nextqueue[<span class="hljs-number">0</span>]<br><span class="hljs-keyword">if</span> top.Left != <span class="hljs-literal">nil</span> &#123;<br>nextqueue = <span class="hljs-built_in">append</span>(nextqueue, top.Left)<br>&#125;<br><br><span class="hljs-keyword">if</span> top.Right != <span class="hljs-literal">nil</span> &#123;<br>nextqueue = <span class="hljs-built_in">append</span>(nextqueue, top.Right)<br>&#125;<br>&#125;<br>queue = <span class="hljs-built_in">append</span>(queue,nextqueue...)<br><br>&#125;<br><span class="hljs-keyword">return</span> res<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="拓展思考"><a href="#拓展思考" class="headerlink" title="拓展思考"></a>拓展思考</h2><p>如果要求最右边的值呢？这里该怎么求呢？</p><p>只需要将 遍历左右的顺序颠倒一下即可</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">findBottomLeftValue</span><span class="hljs-params">(root *TreeNode)</span></span> <span class="hljs-type">int</span> &#123;<br>res := <span class="hljs-number">-1</span><br>queue := []*TreeNode&#123;&#125;<br><br><span class="hljs-keyword">if</span> root == <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-number">-1</span><br>&#125;<br><br>queue = <span class="hljs-built_in">append</span>(queue, root)<br><span class="hljs-comment">//res 在哪里更新呢？</span><br><span class="hljs-keyword">for</span> <span class="hljs-built_in">len</span>(queue) &gt; <span class="hljs-number">0</span> &#123;<br>size := <span class="hljs-built_in">len</span>(queue)<br><span class="hljs-comment">// 遍历每一层</span><br><span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; size; i++ &#123;<br>top := queue[<span class="hljs-number">0</span>]<br>queue = queue[<span class="hljs-number">1</span>:]<br><span class="hljs-comment">// 获取每一层的最左边的位置，更新res</span><br><span class="hljs-keyword">if</span> i == <span class="hljs-number">0</span> &#123;<br>res = top.Val<br>&#125;<br><br><span class="hljs-keyword">if</span> top.Right != <span class="hljs-literal">nil</span> &#123;<br>queue = <span class="hljs-built_in">append</span>(queue, top.Right)<br>&#125;<br><br><span class="hljs-keyword">if</span> top.Left != <span class="hljs-literal">nil</span> &#123;<br>queue = <span class="hljs-built_in">append</span>(queue, top.Left)<br>&#125;<br><br>&#125;<br><br>&#125;<br><span class="hljs-keyword">return</span> res<br>&#125;<br><br><br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://leetcode.cn/problems/find-bottom-left-tree-value/&quot;&gt;513. 找树左下角的值 - 力扣（Leetcode）&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;给定一个二叉树的 &lt;strong&gt;根节点&lt;/strong&gt; </summary>
      
    
    
    
    <category term="leetcode" scheme="http://leiqichn.github.io/categories/leetcode/"/>
    
    
  </entry>
  
  <entry>
    <title>Leetcode 404.左叶子之和</title>
    <link href="http://leiqichn.github.io/2023-03-29-318ae3533bef.html"/>
    <id>http://leiqichn.github.io/2023-03-29-318ae3533bef.html</id>
    <published>2023-03-29T22:44:37.000Z</published>
    <updated>2023-04-12T15:23:58.076Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Definition for a binary tree node.</span><br><span class="hljs-comment"> * type TreeNode struct &#123;</span><br><span class="hljs-comment"> *     Val int</span><br><span class="hljs-comment"> *     Left *TreeNode</span><br><span class="hljs-comment"> *     Right *TreeNode</span><br><span class="hljs-comment"> * &#125;</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">sumOfLeftLeaves</span><span class="hljs-params">(root *TreeNode)</span></span> <span class="hljs-type">int</span> &#123;<br><span class="hljs-comment">// 递归</span><br>res := <span class="hljs-number">0</span><br><span class="hljs-comment">// 终止条件</span><br><span class="hljs-keyword">if</span> root == <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br>&#125;<br>    leftNode := root.Left<br>leftNodeVal := sumOfLeftLeaves(root.Left) <span class="hljs-comment">// 左</span><br>    rightNodeVal := sumOfLeftLeaves(root.Right)<span class="hljs-comment">// 右</span><br><span class="hljs-keyword">if</span> leftNode != <span class="hljs-literal">nil</span> &amp;&amp; leftNode.Left == <span class="hljs-literal">nil</span> &amp;&amp; leftNode.Right == <span class="hljs-literal">nil</span> &#123; <span class="hljs-comment">// 中</span><br>leftNodeVal = leftNode.Val<br>&#125;<br><span class="hljs-comment">// 单次循环</span><br>    res = leftNodeVal + rightNodeVal <span class="hljs-comment">// 中，左边+右边</span><br><span class="hljs-keyword">return</span> res <br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;l</summary>
      
    
    
    
    <category term="leetcode" scheme="http://leiqichn.github.io/categories/leetcode/"/>
    
    
  </entry>
  
  <entry>
    <title>Leetcode 257.二叉树的所有路径</title>
    <link href="http://leiqichn.github.io/2023-03-28-3849178edc04.html"/>
    <id>http://leiqichn.github.io/2023-03-28-3849178edc04.html</id>
    <published>2023-03-28T23:47:29.000Z</published>
    <updated>2023-04-12T15:23:58.076Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Definition for a binary tree node.</span><br><span class="hljs-comment"> * type TreeNode struct &#123;</span><br><span class="hljs-comment"> *     Val int</span><br><span class="hljs-comment"> *     Left *TreeNode</span><br><span class="hljs-comment"> *     Right *TreeNode</span><br><span class="hljs-comment"> * &#125;</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-keyword">var</span> res []<span class="hljs-type">string</span><br><span class="hljs-keyword">var</span> path []<span class="hljs-type">string</span><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">binaryTreePaths</span><span class="hljs-params">(root *TreeNode)</span></span> []<span class="hljs-type">string</span> &#123;<br>    res = <span class="hljs-built_in">make</span>([]<span class="hljs-type">string</span>,<span class="hljs-number">0</span>)<br>    path = <span class="hljs-built_in">make</span>([]<span class="hljs-type">string</span>,<span class="hljs-number">0</span>)<br>    <span class="hljs-keyword">if</span> (root == <span class="hljs-literal">nil</span>) &#123;<br>        <span class="hljs-keyword">return</span> res<br>    &#125;<br>backTracking(root)<br><span class="hljs-keyword">return</span> res<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">backTracking</span><span class="hljs-params">(root *TreeNode)</span></span>&#123;<br><span class="hljs-comment">// 终点 左右子节点都为nil</span><br><span class="hljs-keyword">if</span> isLeafNode(root) &#123;<br>        NodeValStr := strconv.Itoa(root.Val)<br>    path = <span class="hljs-built_in">append</span>(path, NodeValStr)<br>pathStr := strings.Join(path, <span class="hljs-string">&quot;-&gt;&quot;</span>)<br>res = <span class="hljs-built_in">append</span>(res, pathStr)<br><span class="hljs-keyword">return</span><br>&#125;<br><span class="hljs-comment">// 前序遍历 中左右</span><br><span class="hljs-comment">// 遍历 每次递归的操作</span><br>NodeVal:= strconv.Itoa(root.Val)<span class="hljs-comment">// 中</span><br>path = <span class="hljs-built_in">append</span>(path, NodeVal)<br><span class="hljs-keyword">if</span> root.Left != <span class="hljs-literal">nil</span> &#123; <span class="hljs-comment">// 左</span><br>backTracking(root.Left)<br>        path = path[:<span class="hljs-built_in">len</span>(path)<span class="hljs-number">-1</span>]<br>&#125;<br><span class="hljs-keyword">if</span> root.Right != <span class="hljs-literal">nil</span> &#123; <span class="hljs-comment">// 右</span><br>backTracking(root.Right)<br>        path = path[:<span class="hljs-built_in">len</span>(path)<span class="hljs-number">-1</span>]<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">isLeafNode</span><span class="hljs-params">(node *TreeNode)</span></span> <span class="hljs-type">bool</span>&#123;<br><span class="hljs-keyword">if</span> node.Right==<span class="hljs-literal">nil</span> &amp;&amp; node.Left== <span class="hljs-literal">nil</span> &amp;&amp; node!= <span class="hljs-literal">nil</span>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span><br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;l</summary>
      
    
    
    
    <category term="leetcode" scheme="http://leiqichn.github.io/categories/leetcode/"/>
    
    
  </entry>
  
  <entry>
    <title>Leetcode 110.平衡二叉树</title>
    <link href="http://leiqichn.github.io/2023-03-28-40f110530226.html"/>
    <id>http://leiqichn.github.io/2023-03-28-40f110530226.html</id>
    <published>2023-03-28T11:18:47.000Z</published>
    <updated>2023-04-12T15:23:58.076Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://leetcode.cn/problems/balanced-binary-tree/">110. 平衡二叉树 - 力扣（Leetcode）</a></p><p><font color="#2DC26B">简单 </font><br>给定一个二叉树，判断它是否是高度平衡的二叉树。</p><p>本题中，一棵高度平衡二叉树定义为：</p><blockquote><p>一个二叉树_每个节点_ 的左右两个子树的高度差的绝对值不超过 1 。</p></blockquote><p><strong>示例 1：</strong></p><p><img src="https://assets.leetcode.com/uploads/2020/10/06/balance_1.jpg"></p><p><strong>输入：</strong>root &#x3D; [3,9,20,null,null,15,7]<br><strong>输出：</strong>true</p><p><strong>示例 2：</strong></p><p><img src="https://assets.leetcode.com/uploads/2020/10/06/balance_2.jpg"></p><p><strong>输入：</strong>root &#x3D; [1,2,2,3,3,null,null,4,4]<br><strong>输出：</strong>false</p><p><strong>示例 3：</strong></p><p><strong>输入：</strong>root &#x3D; []<br><strong>输出：</strong>true</p><p><strong>提示：</strong></p><ul><li>树中的节点数在范围 <code>[0, 5000]</code> 内</li><li><code>-104 &lt;= Node.val &lt;= 104</code></li></ul><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>这里是求<strong>高度</strong>： 节点到叶子节点的最长距离，使用<strong>后序遍历</strong><br><strong>深度</strong>是root 到该节点的最长距离（距离☞节点数），使用<strong>前序遍历</strong></p><p>因此只要分别计算左右子树的高度，并且做差不大于1就行</p><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><p>使用-1 记录 res 不是平衡二叉树<br>每次执行，都需要判断是不是等于-1，直接返回-1</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://leetcode.cn/problems/balanced-binary-tree/&quot;&gt;110. 平衡二叉树 - 力扣（Leetcode）&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;font color=&quot;#2DC26B&quot;&gt;简单 &lt;/font&gt;&lt;br&gt;给定一</summary>
      
    
    
    
    <category term="leetcode" scheme="http://leiqichn.github.io/categories/leetcode/"/>
    
    
  </entry>
  
  <entry>
    <title>快来压缩你的博客图片</title>
    <link href="http://leiqichn.github.io/2023-03-24-92a37bba7a46.html"/>
    <id>http://leiqichn.github.io/2023-03-24-92a37bba7a46.html</id>
    <published>2023-03-24T00:00:00.000Z</published>
    <updated>2023-04-12T15:23:58.080Z</updated>
    
    <content type="html"><![CDATA[<p>虽然没多大变化 哈哈哈<br><img src="/../../imgs/Pasted%20image%2020230324011438.png"><br>再试试 更大更高清的图片<br><img src="/../../imgs/code-wallpaper-6.png"></p><p><img src="/../../imgs/Pasted%20image%2020230325200454.png"><br>实测,效果不太行….<br>但是还要介绍一下如何压缩哈哈哈，毕竟坑踩都踩了😂，怎么也得记录一下<br>待更新…</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;虽然没多大变化 哈哈哈&lt;br&gt;&lt;img src=&quot;/../../imgs/Pasted%20image%2020230324011438.png&quot;&gt;&lt;br&gt;再试试 更大更高清的图片&lt;br&gt;&lt;img src=&quot;/../../imgs/code-wallpaper-6.png&quot;</summary>
      
    
    
    
    <category term="工具" scheme="http://leiqichn.github.io/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
  </entry>
  
  <entry>
    <title>给你的博客 安装上PWA吧</title>
    <link href="http://leiqichn.github.io/2023-03-24-554b8cbb674b.html"/>
    <id>http://leiqichn.github.io/2023-03-24-554b8cbb674b.html</id>
    <published>2023-03-24T00:00:00.000Z</published>
    <updated>2023-04-12T15:23:58.080Z</updated>
    
    <content type="html"><![CDATA[<p>TODO:</p><ul><li>什么是PWA，可以提示添加到主屏幕<br>渐进式应用，提前缓存网站，像本地应用一样丝滑的使用网站</li><li>安装 hexo-pwa</li><li>由于hexo-pwa停止维护，需要解决报错</li><li>设置全局_config.yml 文件(非主题)</li></ul><p><img src="/../../imgs/Pasted%20image%2020230324004739.png"></p><p><img src="/../../imgs/ad6c5ebfc9a6401cde512120b6ed719.jpeg"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;TODO:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;什么是PWA，可以提示添加到主屏幕&lt;br&gt;渐进式应用，提前缓存网站，像本地应用一样丝滑的使用网站&lt;/li&gt;
&lt;li&gt;安装 hexo-pwa&lt;/li&gt;
&lt;li&gt;由于hexo-pwa停止维护，需要解决报错&lt;/li&gt;
&lt;li&gt;设置全局_con</summary>
      
    
    
    
    <category term="工具" scheme="http://leiqichn.github.io/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
  </entry>
  
  <entry>
    <title>Linux 命令 将前台任务挂到后台运行</title>
    <link href="http://leiqichn.github.io/2023-03-19-aaf910b916ec.html"/>
    <id>http://leiqichn.github.io/2023-03-19-aaf910b916ec.html</id>
    <published>2023-03-19T00:00:00.000Z</published>
    <updated>2023-04-12T15:23:58.076Z</updated>
    
    <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>   很多任务有时不能直接进行挂后台任务（比如需要输入密码的scp 命令），或者一时大意忘了直接挂后台。那么还有一个解救方式。使用<code>bg</code>  挂后台的命令。</p><p><strong>第一步：ctrl + z</strong></p><p><strong>第二步：jobs  查看任务id</strong></p><p><strong>第三步： bg %任务id</strong></p><p><img src="/../../imgs/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20230319125819.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h1&gt;&lt;p&gt;   很多任务有时不能直接进行挂后台任务（比如需要输入密码的scp 命令），或者一时大意忘了直接挂后台。那么还有一个解救方式。使用&lt;code</summary>
      
    
    
    
    <category term="Linux" scheme="http://leiqichn.github.io/categories/Linux/"/>
    
    
    <category term="linux命令" scheme="http://leiqichn.github.io/tags/linux%E5%91%BD%E4%BB%A4/"/>
    
  </entry>
  
  <entry>
    <title>博客设置 obsidian 上传图片</title>
    <link href="http://leiqichn.github.io/2023-03-19-4d59bacf78a0.html"/>
    <id>http://leiqichn.github.io/2023-03-19-4d59bacf78a0.html</id>
    <published>2023-03-19T00:00:00.000Z</published>
    <updated>2023-04-12T15:23:58.080Z</updated>
    
    <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>本地写MD文档我是使用了github 和gitee 图床来着，但是发布到个人博客之后，发现支持都不好。所以选择了最原始的方案，复制图片到指定文件夹，然后连同这些图片文件夹一起上传到对应的git pages, 使用对应的<strong>相对路径</strong>就可以读取并显示图片。</p><p>而obsidian 可以实现插入图片的同时复制到图片到对应的路径，并生成MD 文档格式的链接。</p><h2 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h2><h2 id="1-打开obsidian-文件与链接"><a href="#1-打开obsidian-文件与链接" class="headerlink" title="1. 打开obsidian - 文件与链接"></a>1. 打开obsidian - 文件与链接</h2><h2 id="2-按照下图配置"><a href="#2-按照下图配置" class="headerlink" title="2. 按照下图配置"></a>2. 按照下图配置</h2><p>   *　将内部链接类型 设置为 “基于当前笔记的<strong>相对路径</strong>”<br>     &gt; 因为我们的博客发布了之后，就只有source 文件夹下的文件，所以需要使用<strong>相对路径</strong></p><ul><li>取消wiki 链接 </li><li>指定图片的默认路径为 <code>source/imgs</code><br>&gt; 如果没有该文件夹，则需要先新建一下。</li></ul><p><img src="/../../imgs/Pasted%20image%2020230319131458.png"></p><h2 id="成功"><a href="#成功" class="headerlink" title="成功"></a>成功</h2><p>网页可以成功显示图片</p><p><img src="/../../imgs/Pasted%20image%2020230319134051.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h1&gt;&lt;p&gt;本地写MD文档我是使用了github 和gitee 图床来着，但是发布到个人博客之后，发现支持都不好。所以选择了最原始的方案，复制图片到指定</summary>
      
    
    
    
    <category term="工具" scheme="http://leiqichn.github.io/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
  </entry>
  
  <entry>
    <title>排版测试</title>
    <link href="http://leiqichn.github.io/2023-03-18-16129b89df14.html"/>
    <id>http://leiqichn.github.io/2023-03-18-16129b89df14.html</id>
    <published>2023-03-18T00:00:00.000Z</published>
    <updated>2023-04-12T15:23:58.076Z</updated>
    
    <content type="html"><![CDATA[<p>网页上显示和排版有时候比较麻烦，需要进行测试。本文档就是为测试网页排版格式的。</p><h1 id="HELLO-WORLD"><a href="#HELLO-WORLD" class="headerlink" title="HELLO WORLD"></a>HELLO WORLD</h1><h2 id="Hello-World"><a href="#Hello-World" class="headerlink" title="Hello World"></a>Hello World</h2><h3 id="hello-world"><a href="#hello-world" class="headerlink" title="hello world"></a>hello world</h3><h4 id="hello-world-1"><a href="#hello-world-1" class="headerlink" title="hello world"></a>hello world</h4><p><img src="/../../imgs/Pasted%20image%2020230408134405.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;网页上显示和排版有时候比较麻烦，需要进行测试。本文档就是为测试网页排版格式的。&lt;/p&gt;
&lt;h1 id=&quot;HELLO-WORLD&quot;&gt;&lt;a href=&quot;#HELLO-WORLD&quot; class=&quot;headerlink&quot; title=&quot;HELLO WORLD&quot;&gt;&lt;/a&gt;HELLO </summary>
      
    
    
    
    <category term="Test" scheme="http://leiqichn.github.io/categories/Test/"/>
    
    
    <category term="Linux" scheme="http://leiqichn.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>关于我</title>
    <link href="http://leiqichn.github.io/2023-03-14-2c94ed65547e.html"/>
    <id>http://leiqichn.github.io/2023-03-14-2c94ed65547e.html</id>
    <published>2023-03-14T00:00:00.000Z</published>
    <updated>2023-04-12T15:23:58.076Z</updated>
    
    <content type="html"><![CDATA[<h1 id="博客链接"><a href="#博客链接" class="headerlink" title="博客链接"></a>博客链接</h1><p><a href="https://leiqichn.github.io/">国外链接</a><br><a href="https://leiqicn.gitee.io/">国内链接</a><br>大家可以根据网速情况选取任意一个网页浏览，两个网站内容是实时同步的。</p><h1 id="关于我"><a href="#关于我" class="headerlink" title="关于我"></a>关于我</h1><p>大家好，我是Lei Qi, 毕业于复旦大学 生物信息专业，现转码农成功，任职于华为，担任软件开发工程师一职。本站是为了方便自己记录学习过程，和大家交流经验而建。也是为了学习web, 实现拥有自己一个网站的小目标，才有了本站。欢迎大家多多交流学习，祝大家学习愉快~</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;博客链接&quot;&gt;&lt;a href=&quot;#博客链接&quot; class=&quot;headerlink&quot; title=&quot;博客链接&quot;&gt;&lt;/a&gt;博客链接&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://leiqichn.github.io/&quot;&gt;国外链接&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;htt</summary>
      
    
    
    
    <category term="关于我" scheme="http://leiqichn.github.io/categories/%E5%85%B3%E4%BA%8E%E6%88%91/"/>
    
    
    <category term="about" scheme="http://leiqichn.github.io/tags/about/"/>
    
  </entry>
  
</feed>
